
/* Allgemeine Einstellungen */

* {
    /* Berechnet die Gr√∂ssen der Boxen ohne padding und Border */
    box-sizing: border-box;
    padding: 0;
    margin: 0;
} 

body {
    padding: 0;
    margin: 0;
    clear: both;
    background-color: #ddd;
    }
    

/* Allgemeine Schriften der Site */
    
h1, h2, h3, h4, h5 {
    font-family: 'Neue Helvetica', helvetica, arial, serif;
    }
    
h1 {
    font-size: 2em;
    font-family: 'Neue Helvetica', helvetica, arial, serif;
    padding: 12px;
    margin: 0;
    }

h3 {
    font-size: 1.2em;
    margin: -50 0 0 0;
    display: inline-block;
    }

p {
    font-size: 1em;
    color: light-grey;
    font-family: times, serif;
    }

/*
    Now here is when interesting things start to appear.

    We set up <body> styles with default font and nice gradient in the background.
    And yes, there is a lot of repetition there because of -prefixes but we don't
    want to leave anybody behind.
*/
body {
    font-family: 'Neue Helvetica', helvetica, sans-serif;
    font-size: 100%;
    background: #fff;
}


.fallback-message {
    font-family: sans-serif;
    line-height: 1.3;

    width: 780px;
    padding: 10px 10px 0;
    margin: 20px auto;

    border: 1px solid #E4C652;
    border-radius: 10px;
    background: #EEDC94;
}

.fallback-message p {
    margin-bottom: 10px;
}

.impress-supported .fallback-message {
    display: none;
}

/*
    Now let's style the presentation steps.

    We start with basics to make sure it displays correctly in everywhere ...
*/

.folie {
    /* width: 100%; */
    margin: 0;
    height: 80%;


}

.step {
    position: relative;
    width: 60em;
    padding: 0;
    margin: 0px auto;
}

#map {
    position: absolute;
    float: left;
    margin: 0;
    padding: 0;
    background: #fff;
    width: 15em;
    height: 10.60606061em;
    display: block;
    z-index: 99;
}

#sidemap {
    width: 15em;

}
/*
    ... and we enhance the styles for impress.js.

    Basically we remove the margin and make inactive steps a little bit transparent.
*/
.impress-enabled .step {
    margin: 0;
    opacity: 0.3;
    transition: opacity 0.5s;
}

.impress-enabled .step.active { opacity: 1 }

/*
    These 'slide' step styles were heavily inspired by HTML5 Slides:
    http://html5slides.googlecode.com/svn/trunk/styles.css

    ;)

    They cover everything what you see on first three steps of the demo.
*/
.slide {
    display: block;

    width: 60em;
    height: 50em;
    padding: 0;

    background-color: white;
    border: 1px solid rgba(0, 0, 0, .3);

    color: grey;
}


/*
    And now we start to style each step separately.

    I agree that this may be not the most efficient, object-oriented and
    scalable way of styling, but most of steps have quite a custom look
    and typography tricks here and there, so they had to be styled separately.

    First is the title step with a big <h1> (no room for padding) and some
    3D positioning along Z axis.
*/

#title {
    padding: 0;
}

/*
    The last step is an overview.
    There is no content in it, so we make sure it's not visible because we want
    to be able to click on other steps.

*/
#overview { display: none }

/*
    We also make other steps visible and give them a pointer cursor using the
    `impress-on-` class.
*/
.impress-on-overview .step {
    opacity: 1;
    cursor: pointer;
}


/*
    Now, when we have all the steps styled let's give users a hint how to navigate
    I know, it sounds complicated ... maybe it would be easier with the code?
*/

.hint {
    /*
        We hide the hint until presentation is started and from browsers not supporting
        impress.js, as they will have a linear scrollable view ...
    */
    display: none;

    /*
        ... and give it some fixed position and nice styles.
    */
    position: fixed;
    left: 0;
    right: 0;
    bottom: 2em;

    background: rgba(100,100,100,0.5);
    color: #EEE;
    text-align: center;

    font-size: 2em;
    padding: 0.2em;

    z-index: 100;

    /*
        By default we don't want the hint to be visible, so we make it transparent ...
    */
    opacity: 0;

    /*
        ... and position it below the bottom of the screen (relative to it's fixed position)
    */
    transform:         translateY(400px);

    /*
        Now let's imagine that the hint is visible and we want to fade it out and move out
        of the screen.

        So we define the transition on the opacity property with 1s duration and another
        transition on transform property delayed by 1s so it will happen after the fade out
        on opacity finished.

        This way user will not see the hint moving down.
    */
    transition: opacity 1s, transform 0.5s 0.5s;

}

/*
    Now we 'enable' the hint when presentation is initialized ...
*/
.impress-enabled .hint { display: block }

/*
    ... and we will show it when the first step (with id 'bored') is active.
*/
.impress-on-overview .hint {
    /*
        We remove the transparency and position the hint in its default fixed
        position.
    */
    opacity: 1;
    transform:         translateY(0px);

    /*
        Now for fade in transition we have the oposite situation from the one
        above.

        First after 4.5s delay we animate the transform property to move the hint
        into its correct position and after that we fade it in with opacity
        transition.
    */
    transition: opacity 1s, transform 0.5s 0.5s;

}

